# ⚠️ DANGER: This workflow destroys infrastructure permanently ⚠️
name: 🚨 Destroy Infrastructure with Terraform 🚨

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '⚠️ Select environment to DESTROY ⚠️'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      confirmation:
        description: '⚠️ Type "DESTROY-INFRASTRUCTURE-[ENV]-[DATE]" (e.g., DESTROY-INFRASTRUCTURE-DEV-2024-02-20)'
        required: true
        type: string
      reason:
        description: 'Detailed reason for infrastructure destruction'
        required: true
        type: string
      ticket_id:
        description: 'Related JIRA/ticket reference'
        type: string

# Prevent multiple destruction workflows from running simultaneously
concurrency:
  group: destroy-${{ github.event.inputs.environment }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write
  checks: write    # For creating check runs

jobs:
  pre-destroy-checks:
    name: 🔒 Verification and Safety Checks
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    outputs:
      expected_confirmation: ${{ steps.set-confirmation.outputs.expected_string }}
    
    steps:
      - name: Generate Expected Confirmation String
        id: set-confirmation
        run: |
          CURRENT_DATE=$(date +%Y-%m-%d)
          EXPECTED="DESTROY-INFRASTRUCTURE-${{ github.event.inputs.environment }}-${CURRENT_DATE}"
          echo "expected_string=${EXPECTED}" >> $GITHUB_OUTPUT
          echo "Expected confirmation string: ${EXPECTED}"

      - name: Verify Confirmation String
        if: github.event.inputs.confirmation != steps.set-confirmation.outputs.expected_string
        run: |
          echo "❌ ERROR: Confirmation string does not match expected format"
          echo "Expected: ${{ steps.set-confirmation.outputs.expected_string }}"
          echo "Received: ${{ github.event.inputs.confirmation }}"
          exit 1

      # - name: Verify User Authorization
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}  # Explicitly specify token
      #     script: |
      #       try {
      #         const authorized_users = [
      #           'authorized-user1',
      #           'authorized-user2',
      #           'admin-user'
      #         ];
      #         const authorized_teams = [
      #           'infrastructure-admins',
      #           'platform-leads'
      #         ];
              
      #         if (!authorized_users.includes(context.actor)) {
      #           const teams = await github.rest.teams.listForAuthenticatedUser();
      #           const userTeams = teams.data.map(team => team.name);
      #           const hasAuthorizedTeam = authorized_teams.some(team => userTeams.includes(team));
                
      #           if (!hasAuthorizedTeam) {
      #             core.setFailed(`User ${context.actor} is not authorized to destroy infrastructure`);
      #           }
      #         }
      #       } catch (error) {
      #         core.setFailed(`Authorization check failed: ${error.message}`);
      #       }

      # - name: Verify Business Hours
      #   run: |
      #     HOUR=$(date +%H)
      #     DAY=$(date +%u)
      #     if [ $DAY -gt 5 ] || [ $HOUR -lt 9 ] || [ $HOUR -gt 17 ]; then
      #       echo "❌ ERROR: Infrastructure destruction is only allowed during business hours (Mon-Fri, 9 AM - 5 PM)"
      #       exit 1
      #     fi

  # notify-stakeholders:
  #   name: 📢 Notify Stakeholders
  #   needs: pre-destroy-checks
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: ${{ github.event.inputs.environment }}
  #     url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #   steps:
  #     - name: Send Slack Notification
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         channel-id: 'infrastructure-alerts'
  #         slack-message: |
  #           🚨 *INFRASTRUCTURE DESTRUCTION INITIATED*
  #           *Environment:* ${{ github.event.inputs.environment }}
  #           *Requested by:* ${{ github.actor }}
  #           *Ticket:* ${{ github.event.inputs.ticket_id }}
  #           *Reason:* ${{ github.event.inputs.reason }}
            
  #           Destruction will begin in 10 minutes. React with 🔴 to abort.
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  #     - name: Send Email Notification
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         subject: "🚨 Infrastructure Destruction Initiated - ${{ github.event.inputs.environment }}"
  #         server_address: ${{ secrets.SMTP_SERVER }}
  #         server_port: ${{ secrets.SMTP_PORT }}
  #         username: ${{ secrets.SMTP_USERNAME }}
  #         password: ${{ secrets.SMTP_PASSWORD }}
  #         from: github-actions@company.com
  #         to: ${{ secrets.EMAIL_NOTIFICATIONS }}
  #         convert_markdown: true
  #         body: |
  #           Infrastructure destruction has been initiated.
            
  #           Environment: ${{ github.event.inputs.environment }}
  #           Requested by: ${{ github.actor }}
  #           Ticket: ${{ github.event.inputs.ticket_id }}
  #           Reason: ${{ github.event.inputs.reason }}
            
  #           This action will begin in 10 minutes.

  #     - name: Mandatory Wait Period
  #       run: |
  #         echo "Waiting 10 minutes before proceeding with destruction..."
  #         sleep 600

  destroy-terraform:
    name: 💥 Execute Infrastructure Destruction
    needs: [pre-destroy-checks]  # , notify-stakeholders]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    env:
      # Auth settings
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }} # Default to dev if not specified
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_USE_OIDC: true
      # Infrastructure settings
      ## Terraform
      TF_OUTPUT_NAME: "tf.tfplan"
      ## Resource group
      TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_location: "westeurope"
      TF_VAR_resource_name_prefix: "ezazml9"
      ## Authentication, users and spn
      TF_VAR_devops_spn_object_id: ${{ secrets.TF_VAR_DEVOPS_SPN_OBJECT_ID }}
      TF_VAR_tf_backend_storage_account_id: ${{ secrets.TF_VAR_TF_BACKEND_STORAGE_ACCOUNT_ID }}
      TF_VAR_auth_application_name_prefix: "ezazml9-app"
      TF_VAR_user_principal_name_prefix: "user1"
      TF_VAR_user_display_name: "User 1"
      TF_VAR_user_password: ${{ secrets.TF_VAR_USER_PASSWORD }}
      ## Storage
      TF_VAR_adls_container_name: "ezazml"
      ## Compute
      TF_VAR_compute_instance_size_dev: "Standard_A1_v2"
      TF_VAR_compute_cluster_size_dev: "STANDARD_DS2_V2"
      TF_VAR_compute_cluster_size_prd: "Standard_A1_v2"
      TF_VAR_compute_instance_count_dev: "0"
      TF_VAR_compute_instance_count_prd: "0"
      TF_VAR_compute_cluster_count_dev: "1"
      TF_VAR_compute_cluster_count_prd: "1"
      TF_VAR_compute_cluster_priority_dev: "Dedicated"
      TF_VAR_compute_cluster_priority_prd: "LowPriority"
      TF_VAR_compute_cluster_scale_min_node_dev: "0"
      TF_VAR_compute_cluster_scale_min_node_prd: "0"
      TF_VAR_compute_cluster_scale_max_node_dev: "3"
      TF_VAR_compute_cluster_scale_max_node_prd: "3"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Audit Log Directory
        run: mkdir -p audit-logs

      - name: Record Pre-Destruction State
        run: |
          CURRENT_TIME=$(date '+%Y-%m-%d-%H-%M-%S')
          echo "Recording pre-destruction state at ${CURRENT_TIME}" > audit-logs/pre-destruction-state.txt
          echo "Actor: ${{ github.actor }}" >> audit-logs/pre-destruction-state.txt
          echo "Environment: ${{ github.event.inputs.environment }}" >> audit-logs/pre-destruction-state.txt
          echo "Workflow Run ID: ${{ github.run_id }}" >> audit-logs/pre-destruction-state.txt
          echo "Ticket ID: ${{ github.event.inputs.ticket_id }}" >> audit-logs/pre-destruction-state.txt
          echo "Reason: ${{ github.event.inputs.reason }}" >> audit-logs/pre-destruction-state.txt

      - name: Azure Login
        working-directory: ./env/${{ github.event.inputs.environment }}
        run: |
          make login-spn

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Terraform Init and Workspace Selection
        working-directory: ./iac
        run: |
          make tf-init

      - name: Terraform Plan Destroy
        id: plan
        working-directory: ./iac
        run: |
          make tf-plan-destroy
          terraform show -json ../env/$TF_WORKSPACE/$TF_OUTPUT_NAME > ../audit-logs/$TF_OUTPUT_NAME.json

      - name: Execute Terraform Destroy
        working-directory: ./iac
        run: |
          make tf-destroy-aa

      - name: Record Post-Destruction State
        run: |
          CURRENT_TIME=$(date '+%Y-%m-%d-%H-%M-%S')
          echo "Recording post-destruction state at ${CURRENT_TIME}" > audit-logs/post-destruction-state.txt
          echo "Destruction completed successfully at ${CURRENT_TIME}" >> audit-logs/post-destruction-state.txt

      - name: Upload Audit Logs
        uses: actions/upload-artifact@v4
        with:
          name: destruction-audit-logs-${{ github.event.inputs.environment }}-$(date '+%Y-%m-%d-%H-%M-%S')
          path: audit-logs/
          compression-level: 9
          retention-days: 90

  # post-destroy-notifications:
  #   name: 📝 Post-Destruction Tasks
  #   needs: [destroy-terraform, pre-destroy-checks]
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: ${{ github.event.inputs.environment }}
  #     url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #   if: always()
    
  #   steps:
  #     - name: Notify Slack of Completion
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         channel-id: 'infrastructure-alerts'
  #         slack-message: |
  #           Infrastructure Destruction Status: ${{ needs.destroy-terraform.result == 'success' && '✅ Completed' || '❌ Failed' }}
  #           Environment: ${{ github.event.inputs.environment }}
  #           Executed by: ${{ github.actor }}
  #           Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      
  #     - name: Send Email Notification
  #       uses: dawidd6/action-send-mail@v3
  #       with:
  #         server_address: ${{ secrets.SMTP_SERVER }}
  #         server_port: ${{ secrets.SMTP_PORT }}
  #         username: ${{ secrets.SMTP_USERNAME }}
  #         password: ${{ secrets.SMTP_PASSWORD }}
  #         subject: "🚨 Infrastructure Destruction Completed"
  #         from: github-actions@company.com
  #         to: ${{ secrets.EMAIL_NOTIFICATIONS }}
  #         body: |
  #           Infrastructure destruction has been completed successfully.
            
  #           Environment: ${{ github.event.inputs.environment }}
  #           Executed by: ${{ github.actor }}
  #           Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
