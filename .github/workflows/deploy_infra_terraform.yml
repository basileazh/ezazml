# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events from feature/ branches, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'deploy_infra_terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      # Auth settings (Sensitive - use secrets)
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Infrastructure settings
      ## Terraform
      TF_OUTPUT_NAME: "tf.tfplan"
      TF_WORKSPACE: "dev"
      ## Resource group
      TF_VAR_tenant_id: ${{ secrets.TF_VAR_TENANT_ID }}
      TF_VAR_location: "westeurope"
      TF_VAR_resource_name_prefix: "ezazml"
      ## Authentication, users and spn
      TF_VAR_super_user_object_id: ${{ secrets.TF_VAR_SUPER_USER_OBJECT_ID }}
      TF_VAR_auth_application_name_prefix: "ezazml-app"
      TF_VAR_user_principal_name_prefix: "user1"
      TF_VAR_user_display_name: "User 1"
      TF_VAR_user_password: ${{ secrets.TF_VAR_USER_PASSWORD }}
      ## Storage
      TF_VAR_adls_container_name: "ezazml"
      ## Compute
      TF_VAR_compute_instance_size_dev: "Standard_A1_v2"
      TF_VAR_compute_cluster_size_dev: "STANDARD_DS2_V2"
      TF_VAR_compute_cluster_size_prd: "Standard_A1_v2"
      TF_VAR_compute_instance_count_dev: "0"
      TF_VAR_compute_instance_count_prd: "0"
      TF_VAR_compute_cluster_count_dev: "1"
      TF_VAR_compute_cluster_count_prd: "1"
      TF_VAR_compute_cluster_priority_dev: "Dedicated"
      TF_VAR_compute_cluster_priority_prd: "LowPriority"
      TF_VAR_compute_cluster_scale_min_node_dev: "0"
      TF_VAR_compute_cluster_scale_min_node_prd: "0"
      TF_VAR_compute_cluster_scale_max_node_dev: "3"
      TF_VAR_compute_cluster_scale_max_node_prd: "3"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.7"
      # with:
      #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: 
        make login-spn
        make tf-init
      working-directory: env/dev

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: 
        make login-spn
        make tf-fmt-check
      working-directory: env/dev

    # Generates an execution plan for Terraform
    - name: Terraform Format and Plan
      run: 
        make login-spn
        make tf-plan-no-input
      working-directory: env/dev

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: 
        make login-spn
        make tf-apply-aa-no-input
      working-directory: env/dev
