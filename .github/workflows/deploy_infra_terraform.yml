# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events from feature/ branches, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'üöÄ Deploy Infrastructure with Terraform'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'iac/**/*.tf'
      - '.github/workflows/deploy_infra_terraform.yml'
  pull_request:
    paths:
      - 'iac/**/*.tf'
      - '.github/workflows/deploy_infra_terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select deployment environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      reason:
        description: 'Reason for manual deployment'
        required: true
        type: string
      ticket_id:
        description: 'Related JIRA/ticket reference'
        type: string

# Prevent multiple deployment workflows from running simultaneously
concurrency:
  group: deploy-${{ github.event.inputs.environment || 'dev' }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write
  checks: write

jobs:
  pre-deploy-checks:
    name: üîí Verification and Safety Checks
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    
    steps:
      # - name: Verify Business Hours
      #   if: github.event_name == 'workflow_dispatch'
      #   run: |
      #     HOUR=$(date +%H)
      #     DAY=$(date +%u)
      #     if [ $DAY -gt 5 ] || [ $HOUR -lt 9 ] || [ $HOUR -gt 17 ]; then
      #       echo "‚ùå ERROR: Infrastructure deployment is only allowed during business hours (Mon-Fri, 9 AM - 5 PM)"
      #       exit 1
      #     fi

      - name: Create Audit Directory
        run: mkdir -p audit-logs

      - name: Record Deployment Initiation
        run: |
          CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S %Z')
          {
            echo "Deployment initiated at ${CURRENT_TIME}"
            echo "Actor: ${{ github.actor }}"
            echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
            echo "Trigger: ${{ github.event_name }}"
            echo "Workflow Run ID: ${{ github.run_id }}"
          } > audit-logs/pre-deployment-state.txt

  # notify-stakeholders:
  #   name: üì¢ Notify Stakeholders
  #   needs: pre-deploy-checks
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Send Slack Notification
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         channel-id: 'infrastructure-alerts'
  #         slack-message: |
  #           üöÄ *INFRASTRUCTURE DEPLOYMENT INITIATED*
  #           *Environment:* ${{ github.event.inputs.environment || 'dev' }}
  #           *Initiated by:* ${{ github.actor }}
  #           *Ticket:* ${{ github.event.inputs.ticket_id || 'N/A' }}
  #           *Reason:* ${{ github.event.inputs.reason || 'Automated deployment from main branch' }}
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy-terraform:
    name: üõ†Ô∏è Execute Infrastructure Deployment
    needs: [pre-deploy-checks]  # , notify-stakeholders]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    env:
      # Auth settings
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }} # Default to dev if not specified
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_USE_OIDC: true
      # Infrastructure settings
      ## Terraform
      TF_OUTPUT_NAME: "tf.tfplan"
      ## Resource group
      TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_location: "westeurope"
      TF_VAR_resource_name_prefix: "ezazml8"
      ## Authentication, users and spn
      TF_VAR_devops_spn_object_id: ${{ secrets.TF_VAR_DEVOPS_SPN_OBJECT_ID }}
      TF_VAR_tf_backend_storage_account_id: ${{ secrets.TF_VAR_TF_BACKEND_STORAGE_ACCOUNT_ID }}
      TF_VAR_auth_application_name_prefix: "ezazml8-app"
      TF_VAR_user_principal_name_prefix: "user1"
      TF_VAR_user_display_name: "User 1"
      TF_VAR_user_password: ${{ secrets.TF_VAR_USER_PASSWORD }}
      ## Storage
      TF_VAR_adls_container_name: "ezazml8"
      ## Compute
      TF_VAR_compute_instance_size_dev: "Standard_A1_v2"
      TF_VAR_compute_cluster_size_dev: "STANDARD_DS2_V2"
      TF_VAR_compute_cluster_size_prd: "Standard_A1_v2"
      TF_VAR_compute_instance_count_dev: "0"
      TF_VAR_compute_instance_count_prd: "0"
      TF_VAR_compute_cluster_count_dev: "1"
      TF_VAR_compute_cluster_count_prd: "1"
      TF_VAR_compute_cluster_priority_dev: "Dedicated"
      TF_VAR_compute_cluster_priority_prd: "LowPriority"
      TF_VAR_compute_cluster_scale_min_node_dev: "0"
      TF_VAR_compute_cluster_scale_min_node_prd: "0"
      TF_VAR_compute_cluster_scale_max_node_dev: "3"
      TF_VAR_compute_cluster_scale_max_node_prd: "3"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        working-directory: ./env/${{ github.event.inputs.environment || 'dev' }}
        run: make login-spn

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Terraform Init
        working-directory: ./iac
        run: make tf-init

      - name: Terraform Format Check
        working-directory: ./iac
        run: make tf-fmt-check

      - name: Terraform Plan
        id: plan
        working-directory: ./iac
        run: |
          make tf-plan
          terraform show -json ../env/$TF_WORKSPACE/$TF_OUTPUT_NAME > ../audit-logs/$TF_OUTPUT_NAME.json

      - name: Execute Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        working-directory: ./iac
        run: make tf-apply-aa

      - name: Record Post-Deployment State
        run: |
          CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S %Z')
          {
            echo "Deployment completed at ${CURRENT_TIME}"
            echo "Status: Success"
            echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
          } > audit-logs/post-deployment-state.txt

      - name: Upload Audit Logs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-audit-logs-${{ github.event.inputs.environment || 'dev' }}-$(date '+%Y-%m-%d %H:%M:%S %Z')
          path: audit-logs/
          compression-level: 9
          retention-days: 90

  # post-deploy-notifications:
  #   name: üìù Post-Deployment Tasks
  #   needs: [deploy-terraform, pre-deploy-checks]
  #   runs-on: ubuntu-latest
  #   if: always() && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
    
  #   steps:
  #     - name: Notify Slack of Completion
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         channel-id: 'infrastructure-alerts'
  #         slack-message: |
  #           Infrastructure Deployment Status: ${{ needs.deploy-terraform.result == 'success' && '‚úÖ Completed' || '‚ùå Failed' }}
  #           Environment: ${{ github.event.inputs.environment || 'dev' }}
  #           Executed by: ${{ github.actor }}
  #           Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
